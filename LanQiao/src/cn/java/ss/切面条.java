package cn.java.ss;
/*
 *  一根高筋拉面，中间切一刀，可以得到2根面条。
    如果先对折1次，中间切一刀，可以得到3根面条。
    如果连续对折2次，中间切一刀，可以得到5根面条。
    那么，连续对折10次，中间切一刀，会得到多少面条呢？
    0  2  2^n +1
    1  3
    2  5
    3  9 
    数学发展历史上，圆周率的计算曾有许多有趣甚至是传奇的故事。其中许多方法都涉及无穷级数。
    图1.png中所示，就是一种用连分数的形式表示的圆周率求法。
    下面的程序实现了该求解方法。实际上数列的收敛对x的初始值 并不敏感。	
    结果打印出圆周率近似值（保留小数点后4位，并不一定与圆周率真值吻合）。
 */
public class 切面条 {
	public static void main(String[] args) {
		System.out.println(Math.pow(2, 10) + 1);
		
		//圆周率
		double x = 111; 
		for(int n = 10000; n>=0; n--){
			int i = 2 * n + 1;
			x = 2 + (i*i / x);
		}
		
		System.out.println(String.format("%.4f", 4/(x -1) ));
	}
}
